graph = {
    'A': set(['B', 'C']),
    'B': set(['A', 'D', 'E']),
 'C': set(['A', 'F']),
 'D': set(['B']),
 'E': set(['B', 'F']),
 'F': set(['C', 'E'])
 }

visited=[]
def dfs(visited,graph,node):
     if node not in visited:
            print(node)
            visited.append(node)
            for n in graph[node]:
                dfs(visited,graph,n)
                return visited 
visited=dfs(visited,graph,'A')
print(visited)

def goal(graph, start, goal):
     queue = [(start, [start])]
     while queue:
         (vertex, path) = queue.pop(0)
         for next in graph[vertex] - set(path):
             if next == goal:
                yield path + [next]
             else:
                queue.append((next, path + [next]))
result=list(goal(graph, 'A', 'F'))
print(result)



def shortest_path(graph, start, goal):
     try:
        return next(goal(graph, start, goal))
     except StopIteration:
        return None
result1=shortest_path(graph, 'A', 'F')
print(result1)
        
