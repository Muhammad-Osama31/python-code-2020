graph = {'A': set(['B', 'C']),
 'B': set(['A', 'D', 'E']),
 'C': set(['A', 'F']),
 'D': set(['B']),
 'E': set(['B', 'F']),
 'F': set(['C', 'E'])
 }
#Implement Logic of BFS
def bfs(start):
     queue = [start]
     levels={} #This Dict Keeps track of levels
     levels[start]=0 #Depth of start node is 0
     visited = set(start)
     while queue:
         node = queue.pop(0)
         neighbours=graph[node]
         for neighbor in neighbours:
            if neighbor not in visited:
             queue.append(neighbor)
             visited.add(neighbor)
             levels[neighbor]= levels[node]+1
             print(levels) #print graph level
     return visited
print(str(bfs('A'))) #print gr


#For Finding Breadth First Search Path
def goal(graph, start, goal):
     queue = [(start, [start])]
     while queue:
         (vertex, path) = queue.pop(0)
         for next in graph[vertex] - set(path):
             if next == goal:
                yield path + [next]
             else:
                queue.append((next, path + [next]))
result=list(goal(graph, 'A', 'F'))
print(result)



def shortest_path(graph, start, goal):
     try:
        return next(goal(graph, start, goal))
     except StopIteration:
         return None
result1=shortest_path(graph, 'A', 'F')
print(result1)# ['A', 'C', 'F']